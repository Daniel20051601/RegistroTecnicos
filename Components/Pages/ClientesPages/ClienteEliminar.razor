@page "/Cliente/Eliminar/{ClienteId:int}"
@inject ClienteService clientesService
@inject IToastService toastService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Eliminar Cliente</PageTitle>

@if (Cliente == null)
{
    <p><em>Cargando datos del cliente...</em></p>
}
else
{
    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center bg-primary text-white border-bottom-0">
                <h5 class="card-title ">Eliminar Cliente</h5>
            </div>
            <div class="card-header text-danger">
                <h6 class="card-title ">¿Estás seguro de que quieres eliminar el Cliente?</h6>
            </div>

            <div>
                <div class="card-header">
                    <h5 class="card-title text-center"><strong>Datos del Cliente</strong></h5>
                </div>

                <div class="card-body">
                    <p><strong>Cliente Id: </strong>@Cliente.ClienteId</p>
                    <p><strong>Nombres: </strong>@Cliente.Nombres</p>
                    <p><strong>Dirección: </strong>@Cliente.Direccion</p>
                    <p><strong>RNC: </strong>@Cliente.Rnc</p>
                    <p><strong>Límite de Crédito: </strong>@Cliente.LimiteCredito.ToString("F2")</p>
                    <p><strong>Técnico Encargado: </strong>@Cliente.Tecnico?.Nombre</p>
                    <p><strong>Fecha de Ingreso: </strong>@Cliente.FechaIngreso.ToString("dd/MM/yyyy")</p>
                </div>
            </div>

            <div class="text-center card-footer">
                <div class="btn-group" role="group" aria-label="Grupo de acciones">
                    <a href="/Clientes/Index" class="btn btn-outline-primary">
                        <span class="bi bi-box-arrow-left"></span> Volver
                    </a>
                    <button type="button" class="btn btn-outline-danger bi bi-trash" @onclick="EliminarClienteConfirmado"> Eliminar</button>
                </div>
            </div>

        </div>
    </div>
}


@code {
    [Parameter]
    public int ClienteId { get; set; }
    public Clientes? Cliente { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Cliente = await clientesService.Buscar(ClienteId);

        if (Cliente == null)
        {
            toastService.ShowError($"Cliente con ID {ClienteId} no encontrado");
            navigationManager.NavigateTo("/Clientes/Index");
        }
    }

    private async Task EliminarClienteConfirmado()
    {
        if (Cliente != null)
        {
            var eliminadoExitosamente = await clientesService.Eliminar(Cliente.ClienteId);

            if (eliminadoExitosamente)
            {
                toastService.ShowSuccess("Cliente eliminado correctamente.");
                navigationManager.NavigateTo("/Clientes/Index");
            }
            else
            {
                toastService.ShowError($"Error al eliminar el cliente con ID {Cliente.ClienteId}.");
            }
        }

    }


}
