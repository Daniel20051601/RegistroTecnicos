@page "/Clientes/Edit/{ClienteId:int}"
@inject ClienteService clienteService
@inject IToastService toastService
@inject NavigationManager navigationManager
@inject TecnicosService tecnicoService
@rendermode InteractiveServer

<PageTitle>Editar Cliente</PageTitle>

@if (Cliente == null)
{
    <p><em>Cargando datos del cliente...</em></p>
}
else
{
    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center bg-primary text-white border-bottom-0">
                <h5 class="card-title">Editar Cliente</h5>
            </div>

            <EditForm Model="Cliente" OnValidSubmit="Guardar">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="card-body">
                    <div class="mb-3">
                        <label for="clienteId" class="form-label"><strong>Cliente Id</strong></label>
                        <InputNumber id="clienteId" @bind-Value="Cliente.ClienteId" class="form-control" readonly />
                    </div>

                    <div class="mb-3">
                        <label for="nombres" class="form-label"><strong>Nombres</strong></label>
                        <InputText id="nombres" @bind-Value="Cliente.Nombres" class="form-control" />
                        <ValidationMessage For="@(() => Cliente.Nombres)" />
                    </div>

                    <div class="mb-3">
                        <label for="direccion" class="form-label"><strong>Dirección</strong></label>
                        <InputText id="direccion" @bind-Value="Cliente.Direccion" class="form-control" />
                        <ValidationMessage For="@(() => Cliente.Direccion)" />
                    </div>

                    <div class="mb-3">
                        <label for="Rnc" class="form-label"><strong>RNC</strong></label>
                        <InputText id="Rnc" @bind-Value="Cliente.Rnc" class="form-control" />
                        <ValidationMessage For="@(() => Cliente.Rnc)" />
                    </div>

                    <div class="mb-3">
                        <label for="limiteCredito" class="form-label"><strong>Límite de Crédito</strong></label>
                        <InputNumber id="limiteCredito" @bind-Value="Cliente.LimiteCredito" class="form-control" />
                        <ValidationMessage For="@(() => Cliente.LimiteCredito)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label"><strong>Técnico Encargado</strong></label>
                        <InputSelect class="form-select" @bind-Value="Cliente.TecnicoId">
                            <option value="0">Seleccione un Técnico</option>
                            @foreach (var tecnico in ListaTecnicos)
                            {
                                <option value="@tecnico.TecnicoId">@tecnico.Nombre</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => Cliente.TecnicoId)" />
                    </div>
                </div>

                <div class="card-footer d-flex justify-content-center mt-2 ">
                    <div class="btn-group" role="group" aria-label="Grupo de acciones">
                        <a href="/Clientes/Index" class="btn btn-outline-secondary">
                            <span class="bi bi-box-arrow-left"></span> Volver
                        </a>
                        <button type="submit" class="btn btn-outline-success"><i class="bi bi-check-circle-fill"></i> Guardar</button>
                        <!-- Botón para abrir modal -->
                        <button type="button" class="btn btn-danger bi bi-trash" @onclick="() => MostrarModalEliminar = true">
                            <i class="bi bi-trash"></i> Eliminar
                        </button>
                    </div>
                </div>

            </EditForm>
        </div>
    </div>

    @if (MostrarModalEliminar)
    {
        <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content shadow">
                    <div class="modal-header bg-danger text-white">
                        <h5 class="modal-title">Eliminar Cliente</h5>
                        <button type="button" class="btn-close" @onclick="CerrarModalEliminar" aria-label="Cerrar"></button>
                    </div>
                    <div class="modal-body">
                        <p>¿Estás seguro de que deseas eliminar al cliente <strong>@Cliente.Nombres</strong>?</p>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" @onclick="CerrarModalEliminar">Cancelar</button>
                        <button class="btn btn-danger" @onclick="EliminarCliente">Eliminar</button>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    [Parameter]
    public int ClienteId { get; set; }
    public Clientes? Cliente { get; set; }
    private List<Tecnicos> ListaTecnicos { get; set; } = new List<Tecnicos>();

    private bool MostrarModalEliminar = false;

    protected override async Task OnInitializedAsync()
    {
        Cliente = await clienteService.Buscar(ClienteId);
        ListaTecnicos = await tecnicoService.Listar(t => true);

        if (Cliente == null)
        {
            toastService.ShowError($"Cliente con ID {ClienteId} no encontrado");
            navigationManager.NavigateTo("/Clientes/Index");
        }
    }

    private async Task Guardar()
    {
        try
        {
            if (Cliente != null)
            {
                if (await clienteService.ExisteNombreORnc(c => c.Nombres == Cliente.Nombres, Cliente.ClienteId))
                {
                    toastService.ShowError("Ya existe un cliente con este nombre. Por favor, elige un nombre diferente.");
                    return;
                }

                if (await clienteService.ExisteNombreORnc(c => c.Rnc == Cliente.Rnc, Cliente.ClienteId))
                {
                    toastService.ShowError("Ya existe un cliente con este RNC. Por favor, elige un RNC diferente.");
                    return;
                }

                if (await clienteService.Guardar(Cliente))
                {
                    toastService.ShowSuccess("Cliente guardado correctamente.");
                    navigationManager.NavigateTo("/Clientes/Index");
                }
                else
                {
                    toastService.ShowError("No se pudo guardar el cliente");
                }
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error al guardar el cliente: {ex.Message}");
            return;
        }
    }

    private void CerrarModalEliminar()
    {
        MostrarModalEliminar = false;
    }

    private async Task EliminarCliente()
    {
        if (Cliente != null)
        {
            var eliminado = await clienteService.Eliminar(Cliente.ClienteId);
            if (eliminado)
            {
                toastService.ShowSuccess("Cliente eliminado correctamente.");
                navigationManager.NavigateTo("/Clientes/Index");
            }
            else
            {
                toastService.ShowError("No se pudo eliminar el cliente.");
            }
        }

        MostrarModalEliminar = false;
    }
}
