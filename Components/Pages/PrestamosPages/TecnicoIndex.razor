@page "/Tecnico/Index"
@page "/"
@using System.Linq.Expressions
@inject TecnicosService tecnicosService
@rendermode InteractiveServer
@attribute [StreamRendering(true)]

<PageTitle>Registro de Tecnicos</PageTitle>

<div class="container">
    <div class="card shadow-lg">
        <div class="card-header d-flex justify-content-center align-items-center p-3">
            <h4 class="card-title mb-0">Consulta de Técnicos</h4>
        </div>
        <div class="card-body">

            <div class="row">
                <div class="col-3">
                    <label class="col-form-label"><strong>Filtrar por</strong></label>
                </div>
                <div class="col text-end">
                    <a href="/Tecnico/Create" class="btn btn-success">
                        <span class="bi bi-plus-square"></span> Crear
                    </a>
                </div>
            </div>

            <div class="row align-items-center mb-3">
                <div class="col-3">
                    <InputSelect class="form-select" @bind-Value="Filtro" @onchange="Ordenar">
                        <option value="TecnicoId">TécnicoId</option>
                        <option value="Nombre">Nombre</option>
                    </InputSelect>
                </div>
                <div class="col-4">
                    <div class="input-group">
                        <input class="form-control"
                               @bind="ValorFiltro"
                               placeholder="Buscar por @(Filtro == "Nombre" ? "Nombre" : "ID")" />
                        <button type="button" class="btn btn-primary" @onclick="Buscar">
                            <i class="bi bi-search me-1"></i> Buscar
                        </button>
                    </div>
                </div>
            </div>

           @if (isLoading)
            {
                <div class="text-center my-4">
                    <div class="spinner-border" role="status"></div>
                    <span class="ms-2">Cargando técnicos...</span>
                </div>
            }
            else
            {
                <table class="table table-hover">
                    <thead class="table table-striped text-black">
                        <tr>
                            <th>TecnicoId</th>
                            <th>Nombre</th>
                            <th>Sueldo</th>
                            <th>Editar</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var tecnico in ListaTecnicos)
                        {
                            <tr>
                                <td>@tecnico.TecnicoId</td>
                                <td>@tecnico.Nombre</td>
                                <td>@tecnico.SueldoPorHora.ToString("F2")</td>
                                <td>
                                    <a href="/Tecnico/Edit/@tecnico.TecnicoId"
                                       class="btn btn-outline-primary bi bi-pencil-square"></a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

@code {
    public List<Tecnicos> ListaTecnicos { get; set; } = new();
    public string Filtro { get; set; } = "TecnicoId";
    public string ValorFiltro { get; set; } = string.Empty;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await CargarYOrdenar();
        isLoading = false;
        StateHasChanged();
    }

    private async Task CargarYOrdenar()
    {
        try
        {
            Expression<Func<Tecnicos, bool>> criterio;

            if (!string.IsNullOrWhiteSpace(ValorFiltro))
            {
                if (Filtro == "Nombre")
                {
                    var nombreBuscado = ValorFiltro.ToLower();
                    criterio = t => t.Nombre != null
                                    && t.Nombre.ToLower().Contains(nombreBuscado);
                }
                else
                {
                    if (int.TryParse(ValorFiltro, out int idBuscado))
                        criterio = t => t.TecnicoId == idBuscado;
                    else
                        criterio = t => false;
                }
            }
            else
            {
                criterio = t => true;
            }

            var lista = await tecnicosService.Listar(criterio);


            ListaTecnicos = Filtro == "Nombre"
                ? lista.OrderBy(t => t.Nombre).ToList()
                : lista.OrderBy(t => t.TecnicoId).ToList();


        }catch (Exception ex)
        {
            ListaTecnicos = new List<Tecnicos>();
        }
    
    }

    private async Task Buscar()
        => await CargarYOrdenar();

    private async Task Ordenar(ChangeEventArgs e)
    {
        Filtro = e.Value?.ToString() ?? "TecnicoId";
        ValorFiltro = "";            
        await CargarYOrdenar();
    }
}
