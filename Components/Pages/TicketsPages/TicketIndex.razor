@page "/Ticket/Index"
@using System.Linq.Expressions
@inject IToastService toastService
@inject TicketService ticketService
@rendermode InteractiveServer
@attribute [StreamRendering(true)]

<PageTitle>Registro de Tickets</PageTitle>

<div class="container">
    <div class="card shadow-lg">
        <div class="card-header d-flex justify-content-center align-items-center p-3">
            <h4 class="card-title mb-0">Consulta de Tickets</h4>
        </div>

        <div class="card-body p-3">

            <div class="col text-end">
                <a href="/Ticket/Create" class="btn btn-success">
                    <span class="bi bi-plus-square"></span> Crear
                </a>
            </div>

            <div class="row align-items-center mb-1">
                <div class="col-3">
                    <label class="col-form-label"><strong>Filtrar por</strong></label>
                </div>
                <div class="col-4"></div>
                <div class="col-2">
                    <label class="col-form-label"><strong>Desde</strong></label>
                </div>
                <div class="col-2">
                    <label class="col-form-label"><strong>Hasta</strong></label>
                </div>
            </div>

            <div class="row align-items-center mb-3">
                <div class="col-3">
                    <InputSelect class="form-select" @bind-Value="Filtro" @onchange="Ordenar">
                        <option value="TicketId">Ticket Id</option>
                        <option value="Prioridad">Prioridad</option>
                        <option value="NombreCliente">Cliente</option>
                        <option value="NombreTecnico">T&eacute;cnico</option>
                        <option value="Asunto">Asunto</option>
                        <option value="Descripcion">Descripci&oacute;n</option>
                    </InputSelect>
                </div>
                <div class="col-4">
                    <div class="input-group">
                        <input class="form-control" @bind="ValorFiltro"
                               placeholder="Buscar" />
                        <button type="button" class="btn btn-primary" @onclick="Buscar">
                            <i class="bi bi-search me-1"></i> Buscar
                        </button>
                    </div>
                </div>
                <div class="col-2">
                    <InputDate class="form-control" @bind-Value="FechaDesde" id="fechaDesde" />
                </div>
                <div class="col-2">
                    <InputDate class="form-control" @bind-Value="FechaHasta" id="fechaHasta" />
                </div>
            </div>

            @if (isloading)
            {
                <div class="text-center my-4">
                    <div class="spinner-border text-primary" role="status"></div>
                    <span class="ms-2">Cargando clientes...</span>
                </div>
            }
            else
            {
                <table class="table table-hover">
                    <thead class="table table-striped text-black">
                        <tr>
                            <th>Ticket Id</th>
                            <th>Cliente</th>
                            <th>Fecha</th>
                            <th>Prioridad</th>
                            <th>Asunto</th>
                            <th>Descripci&oacute;n</th>
                            <th>T&eacute;cnico</th>
                            <th>Editar</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (ListaTickets.Any())
                        {
                            @foreach (var ticket in ListaTickets)
                            {
                                <tr>
                                    <td>@ticket.TicketId</td>
                                    <td>@ticket.Cliente?.Nombres</td>
                                    <td>@ticket.Fecha.ToString("dd/MM/yyyy")</td>
                                    <td>@ticket.Prioridad</td>
                                    <td>@ticket.Asunto</td>
                                    <td>@ticket.Descripcion</td>
                                    <td>@ticket.Tecnico?.Nombre</td>
                                    <td>
                                        <a href="/Ticket/Edit/@ticket.TicketId"
                                           class="btn btn-outline-primary bi bi-pencil-square"></a>
                                    </td>
                                </tr>
                            }

                        }
                        else
                        {
                            <tr>
                                <td colspan="8" class="text-center">No se encontraron tickets</td>
                            </tr>
                        }
                    </tbody>
                </table>
                @if (paginacion != null) 
                {
                    <nav aria-label="Page navigation">
                        <ul class="pagination justify-content-center mt-3">
                            <li class="page-item @(paginacion.HasPreviousPage ? "" : "disabled")">
                                <button type="button" class="page-link" @onclick="() => GoToPage(paginacion.PageIndex - 1)">Anterior</button>
                            </li>
                            @for (int i = 1; i <= paginacion.TotalPages; i++)
                            {
                                <li class="page-item @(i == paginacion.PageIndex ? "active" : "")">
                                    <button type="button" class="page-link" @onclick="() => GoToPage(i)">@i</button>
                                </li>
                            }
                            <li class="page-item @(paginacion.HasNextPage ? "" : "disabled")">
                                <button type="button" class="page-link" @onclick="() => GoToPage(paginacion.PageIndex + 1)">Siguiente</button>
                            </li>
                        </ul>
                        <div class="text-center text-muted">
                            Página @(paginacion.PageIndex) de @(paginacion.TotalPages) | Total: @(paginacion.TotalCount) tickets
                        </div>
                    </nav>
                }
            }
        </div>

    </div>

</div>

@code {
    public List<Tickets> ListaTickets { get; set; } = new();
    public string Filtro { get; set; } = "TicketId";
    public string ValorFiltro { get; set; } = string.Empty;
    private bool isloading = true;
    public DateTime? FechaDesde { get; set; } = null;
    public DateTime? FechaHasta { get; set; } = null;

    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 5;
    private Paginacion<Tickets>? paginacion; 

    protected override async Task OnInitializedAsync()
    {
        isloading = true;
        await CargarYOrdenar();
        isloading = false;
        StateHasChanged();
    }

    private async Task CargarYOrdenar()
    {
        try
        {
            paginacion = await ticketService.ListarTicketsFiltrados(
                Filtro,
                ValorFiltro,
                FechaDesde,
                FechaHasta,
                CurrentPage,
                PageSize
            );
            ListaTickets = paginacion ?? new List<Tickets>();
        }
        catch (Exception ex)
        {
            ListaTickets = new List<Tickets>();
            paginacion = null;
            toastService.ShowError("Error al cargar los tickets: " + ex.Message);
        }
        StateHasChanged();
    }

    private async Task Buscar()
    {   
        CurrentPage = 1;
        await CargarYOrdenar();
        StateHasChanged();
    }

    private async Task Ordenar(ChangeEventArgs e)
    {
        Filtro = e.Value?.ToString() ?? "TicketId";
        ValorFiltro = ""; 
        CurrentPage = 1;
        await CargarYOrdenar();
        StateHasChanged();
    }
    private async Task GoToPage(int pageNumber)
    {
        if (paginacion != null && pageNumber > 0 && pageNumber <= paginacion.TotalPages)
        {
            CurrentPage = pageNumber; 
            await CargarYOrdenar();   
        }
    }
}