@page "/Sistemas/Index"
@rendermode InteractiveServer
@attribute [StreamRendering(true)]
@using System.Linq.Expressions
@inject IToastService toastService
@inject SistemasService sistemasService

<PageTitle>Consulta de Sistemas</PageTitle>

<div class="container">
    <div class="card shadow-lg">
        <div class="card-header d-flex justify-content-center align-items-center p-3">
            <h4 class="card-title mb-0">Consulta de Sistemas</h4>
        </div>
        <div class="card-body p-3">

            <div class="col text-end">
                <a href="/Sistemas/Create" class="btn btn-success">
                    <span class="bi bi-plus"></span>Crear
                </a>
            </div>

            <div class="row align-items-center mb-1">
                <div class="col-3">
                    <label class="col-form-label"><strong>Filtrar por</strong></label>
                </div>
                <div class="col-4"></div>
                <div class="col-2">
                    <label class="col-form-label"><strong>Desde</strong></label>
                </div>
                <div class="col-2">
                    <label class="col-form-label"><strong>Hasta</strong></label>
                </div>
            </div>

            <div class="row align-items-center mb-3">

                <div class="col-3">
                    <InputSelect class="form-select" @bind-Value="Filtro" @onchange="Ordenar">
                        <option value="SistemaId">Sistema Id</option>
                        <option value="Descripcion">Descripci&oacute;n</option>
                        <option value="Complejidad" >Complejidad</option>
                    </InputSelect>
                </div>
                <div class="col-4">
                    <div class="input-group">
                        <input class="form-control" @bind="ValorFiltro" placeholder="Buscar" />
                        <button type="button" class="btn btn-primary" @onclick="Buscar">
                            <i class="bi bi-search me-1"></i> Buscar
                        </button>
                    </div>
                </div>
                <div class="col-2">
                    <InputDate class="form-control" @bind-Value="FechaDesde" id="fechaDesde" />
                </div>
                <div class="col-2">
                    <InputDate class="form-control" @bind-Value="FechaHasta" id="fechaHasta" />
                </div>

            </div>

            @if (isLoading)
            {
                <div class="text-center my-4">
                    <div class="spinner-border text-primary" role="status"></div>
                    <span class="ms-2">Cargando...</span>
                </div>
            }
            else
            {
                <table class="table table-hover">
                    <thead class="table table-striped text-black">
                        <tr>
                            <th>Sistema Id</th>
                            <th>Descripci&oacute;n</th>
                            <th>Complejidad</th>
                            <th>Fecha de Creaci&oacute;n</th>
                            <th>Editar</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Sistemas.Any())
                        {
                            @foreach (var sistema in Sistemas)
                            {
                                <tr>
                                    <td>@sistema.SistemaId</td>
                                    <td>@sistema.DescripcionSistema</td>
                                    <td>@sistema.Complejidad</td>
                                    <td>@sistema.Fecha.ToString("dd/MM/yyyy")</td>
                                    <td>
                                        <a href="/Sistemas/Edit/@sistema.SistemaId" class="btn btn-outline-primary bi bi-pencil-square"></a>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="8" class="text-center">No se encontraron tickets</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>

    @if(paginacion != null)
    {
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center mt-3">
                <li class="page-item @(paginacion.HasPreviousPage ? "" : "disabled")">
                    <button type="button" class="page-link" @onclick="() => GoToPage(paginacion.PageIndex - 1)">Anterior</button>
                </li>
                @for (int i = 1; i <= paginacion.TotalPages; i++)
                {
                    <li class="page-item @(i == paginacion.PageIndex ? "active" : "")">
                        <button type="button" class="page-link" @onclick="() => GoToPage(i)">@i</button>
                    </li>
                }
                <li class="page-item @(paginacion.HasNextPage ? "" : "disabled")">
                    <button type="button" class="page-link" @onclick="() => GoToPage(paginacion.PageIndex + 1)">Siguiente</button>
                </li>
            </ul>
            <div class="text-center text-muted">
                Página @(paginacion.PageIndex) de @(paginacion.TotalPages) | Total: @(paginacion.TotalCount) Sistemas
            </div>
        </nav>
    }

</div>




@code {
    public List<Sistemas> Sistemas { get; set; } = new();
    public string Filtro { get; set; } = "SistemaId";
    public string ValorFiltro { get; set; } = string.Empty;
    public DateTime FechaDesde { get; set; } = DateTime.Now;
    public DateTime FechaHasta { get; set; } = DateTime.Now;
    public bool isLoading { get; set; } = true;

    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 6;
    private Paginacion<Sistemas>? paginacion;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await CargarYOrdenar();
        isLoading = false;
        StateHasChanged();
    }

    private async Task CargarYOrdenar()
    {
        try
        {
            paginacion = await sistemasService.ListarSistemasFiltrados(
                Filtro, 
                ValorFiltro, 
                FechaDesde, 
                FechaHasta, 
                CurrentPage, 
                PageSize
            );

            Sistemas = paginacion ?? new List<Sistemas>();
        }catch(Exception e)
        {
            Sistemas = new List<Sistemas>();
            paginacion = null;
            toastService.ShowError("Error al cargar los sistemas: " + e.Message);
        }
        StateHasChanged();
    }

    public async Task Buscar()
    {
        CurrentPage = 1;
        await CargarYOrdenar();
        StateHasChanged();
    }

    public async Task Ordenar(ChangeEventArgs e)
    {
        Filtro = e.Value?.ToString() ?? "SistemaId";
        ValorFiltro = "";
        CurrentPage = 1;
        await CargarYOrdenar();
        StateHasChanged();
    }

    private async Task GoToPage(int pageNumber)
    {
        if (paginacion != null && pageNumber > 0 && pageNumber <= paginacion.TotalPages)
        {
            CurrentPage = pageNumber;
            await CargarYOrdenar();
            StateHasChanged();
        }
    }   
}
